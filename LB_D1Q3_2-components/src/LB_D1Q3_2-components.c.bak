/*
 * LB_D1Q3_2components.c
 *
 *  Created on: Apr 22, 2016
 *      Author: Kent Ridl
 */


#include "LB_D1Q3_2-components.h"


// Initial densities of each component
double n1_liquid = 1.27;
double n2_liquid = 1.27;
double n1_gas = 0.6;
double n2_gas = 0.6;
//double n1_liquid = 1.27;
//double n2_liquid = 0.1;
//double n1_gas = 0.6;

// Total amount of each component
double rho1 = 0;
double rho2 = 0;
double rho = 0;
double excludedVolume1 = 0;
double excludedVolume2 = 0;
double excludedVolume = 0;

// Evaporation constants
double dn=0; 				// delta n for evaporation
int epos=0;  				// lattice position at which evaporation occurs

// Equations of motion constants
double T0=0.33333333;  		// initial theta from write-up
double theta = 1./3.;
double n0=1;
double Amp=0.01;
double oneOverTau = 1;		// 1/tau from write-up (relaxation constant)
double tau = 1;
double g = 0;          		// gravitational acceleration term
double lambda = 1;     		// friction (F12) coefficient
double gammagamma = 0.001;			// chemical potential coefficient
double kappa = 0.1;
double a1 = 0.1;				// VDW constants for each component, interaction
double a2 = 0.1;
double a12 = 0.1;
double b1 = 0.1;
double b2 = 0.1;
double dummy = 1;

// Critical point traits
double tc = .334;
double nc = 1;
double pc = 1;

// GUI
int ulreq=0;
int ugreq=0;
int pgreq=0;
int tgreq=0;
int mu1greq = 0; // graph requests
int next=0;
int Pause=1;
int done=0;
int Repeat=10;
int iterations;
int collectData = 0;
int wall = XDIM * 0.5;
//int smoothing = 0;


//void velocitySmoothing() {
//
//	int i;
//
//	// Smoothing algorithm to help average out velocity noise
//	if (smoothing) {
//		for (i = 0; i < XDIM-1; i++) {
//			u1[i] = (u1[i] + u1[i+1]) * 0.5;
//			u2[i] = (u2[i] + u2[i+1]) * 0.5;
//		}
//	}
//}


void calculatePressures() {

	int i;
	int ip = 0;
	int im = 0;
	double dn;
	//double ddn;
	double dp;
	double ddp;
	double omega = 1./oneOverTau;

	for (i = 0; i < XDIM; i++) {
		ip=(i+1)%XDIM;
		im=(i+XDIM-1)%XDIM;
		dn=gradient(n1,i); //0.5*(n1[ip]-n1[im]);
		ddni[i]=laplace(n1,i); //(n1[ip]-2*n1[i]+n1[im]);
		pni[i]=Pni(n1[i],dn,ddni[i]);
		p[i] = P(n1[i],dn,ddni[i]);
	}

	for (i = 0; i < XDIM; i++) {
		ip=(i+1)%XDIM;
		im=(i+XDIM-1)%XDIM;
		dp=gradient(pni,i); //0.5*(pni[ip]-pni[im]);
		ddp=laplace(p,i); //(p[ip]-2*p[i]+p[im]);
		//ddn=laplace(n1,i); //(n1[ip]-2*n1[i]+n1[im]);

		F[i]=-dp;

		pf[i]=p[i]-0.25*F[i]*F[i]/n1[i]-(1./omega-0.5)*F[i]*F[i]/n1[i]+0.25*ddp-1./12.*ddni[i];
		PF[i]=p[i]+0.25*F[i]*F[i]/n1[i]+0.25*ddp-1./12.*ddni[i];
	}

}


void collisionForcingOriginal() {
  double F1,F2,F12;
  double omega = 1. / oneOverTau;
  int i,ip,im;

  iterations++;

  // Sweep across the lattice to conserve mass and determine the pressures at each cell
  for (i=0;i<XDIM;i++){

    n1[i]=f1_0[i]+f1_1[i]+f1_2[i]; // 1st component mass density for this step
    n2[i]=f2_0[i]+f2_1[i]+f2_2[i]; // 2st component mass density for this step
    u1[i] = (f1_1[i]-f1_2[i]) / n1[i];
    u2[i] = (f2_1[i]-f2_2[i]) / n2[i];

    n[i] = n1[i] + n2[i];          // conservation of mass

    pressure1[i] = n1[i]/(3.-n1[i]) - (9./8.)*tc*n1[i]*n1[i]; // van der Waals gas pressure term
    pressureNonIdeal1[i] = pressure1[i] - n1[i]*theta;                          // non-ideal part of pressure (vdw - ideal)
    pressure2[i] = 0;                                         // for now since ideal gas; will change

    mu1[i] = pc*(-1./3.*log(1./n1[i]-1./(3*nc)) + 1./(3-(n1[i]/nc)) - 9*theta*n1[i]/(4*nc)); // verify the algebra leading to this
    // mu2 will be much simpler since it's an ideal gas
    mu2[i] = theta*log(n2[i]); // assuming the reference/inital Gibbs is zero for now (dimensionless in lattice units)
    //mu2[i] = T*log(n2[i]/n[i]);
  }

//  calculatePressures();

  // Sweep across the lattice to perform the collision at each cell, including external forcing
  for (i=0;i<XDIM;i++) {

    // Indices to calculate the following forces for each component
    //  - Adjusts gradient for existence of walls
    ip = i+1;
    if (ip == wall) ip = wall-1;
    else if (ip == XDIM) ip = XDIM-1;
    im = i-1;
    if (im == -1) im = 0;
    else if (im == wall-1) im = wall;

    // PGF plus gravity term for each component
    F1 = -1./2.*(pressureNonIdeal1[ip]-pressureNonIdeal1[im]) + n1[i]*g;
    F2 = -1./2.*(pressureNonIdeal2[ip]-pressureNonIdeal2[im]) + n2[i]*g;

    // Net momentum/velocity (mass flux) for this step
    //  - Equals zero if equal mass density moving in each direction
    u1g[i] = u1[i] + 0.5*F1/n1[i];
    u2g[i] = u2[i] + 0.5*F2/n2[i];

    // Calculate the friction between each of the two components
    F12= lambda*n1[i]*n2[i]/(n1[i]+n2[i])*(u2g[i]-u1g[i]);

    // Final forcing for each component including friction
    F1+=F12;
    F2-=F12;

    // Calculate lattice spots with PGF, gravity, and friction
    f1_0[i]+=omega*((n1[i]-n1[i]*theta-n1[i]*u1[i]*u1[i])-f1_0[i]) + (-2.*F1*u1[i]);
    f1_1[i]+=omega*((1./2.)*(n1[i]*u1[i]*u1[i]+n1[i]*u1[i]+n1[i]*theta)-f1_1[i]) + (F1*u1[i]+1./2.*F1);
    f1_2[i]+=omega*((1./2.)*(n1[i]*u1[i]*u1[i]-n1[i]*u1[i]+n1[i]*theta)-f1_2[i]) + (F1*u1[i]-1./2.*F1);

    f2_0[i]+=omega*((n2[i]-n2[i]*theta-n2[i]*u2[i]*u2[i])-f2_0[i]) + (-2.*F2*u2[i]);
    f2_1[i]+=omega*((1./2.)*(n2[i]*u2[i]*u2[i]+n2[i]*u2[i]+n2[i]*theta)-f2_1[i]) + (F2*u2[i]+1./2.*F2);
    f2_2[i]+=omega*((1./2.)*(n2[i]*u2[i]*u2[i]-n2[i]*u2[i]+n2[i]*theta)-f2_2[i]) + (F2*u2[i]-1./2.*F2);

  }

} // end function collision()


void collisionForcingNewPressureGradient() {

	int i;
	double correction = 0;
	double psi = 0;
	//	double interaction = 0;

	iterations++;

	// Sweep across the lattice to conserve mass and determine the pressures at each cell
	for (i = 0; i < XDIM; i++) {

		n1[i] = f1_0[i] + f1_1[i] + f1_2[i]; 				// 1st component mass density for this step
		n2[i] = f2_0[i] + f2_1[i] + f2_2[i]; 				// 2st component mass density for this step
		u1[i] = (f1_1[i]-f1_2[i]) / n1[i];
		u2[i] = (f2_1[i]-f2_2[i]) / n2[i];

		n[i] = n1[i] + n2[i];          						// conservation of particles
		nReduced[i] = n1[i]*n2[i] / n[i];
		u[i] = (n1[i]*u1[i] + n2[i]*u2[i]) / n[i];			// bulk average velocity

		pressure1[i] = n1[i]/(3.-n1[i]) - (9./8.)*tc*n1[i]*n1[i];	// van der Waals gas pressure term
		pressure2[i] = n2[i]/(3.-n2[i]) - (9./8.)*tc*n2[i]*n2[i];

		mu1[i] = pc*(-theta*log(1./n1[i]-1./(3*nc)) + theta/(1-(n1[i]/(3*nc))) - (9./4.)*tc*n1[i]/nc); // TODO: verify the algebra leading to this
		mu2[i] = pc*(-theta*log(1./n2[i]-1./(3*nc)) + theta/(1-(n2[i]/(3*nc))) - (9./4.)*tc*n2[i]/nc); // theta*log(n2[i]);	// assuming the reference/initial Gibbs is zero for now (dimensionless in lattice units)
	}

	//velocitySmoothing();

	calculatePressures();

	// Correction for the pressure gradient terms
	for (i = 0; i < XDIM; i++) {	// this correction makes it equal to Alexander's p[] from paper, not pf[] or PF[]

		//		interaction = dummy*( -1.*a*n1[i]*n2[i] - n1[i]*laplace(n2,i) - n2[i]*laplace(n1,i) - gradient(n1,i)*gradient(n2,i) - gradient(n2,i)*gradient(n1,i) );

		correction = -kappa*( n1[i]*laplace(n1,i) + (1./2.)*gradient(n1,i)*gradient(n1,i) ) + ( kappa*gradient(n1,i)*gradient(n1,i) ); // + (n1[i]/n[i])*interaction;
		pressure1[i] += correction;
		pressureNonIdeal1[i] = pressure1[i] - n1[i]*theta;	// non-ideal part of pressure (vdw - ideal); provides a force

		correction = -kappa*( n2[i]*laplace(n2,i) + (1./2.)*gradient(n2,i)*gradient(n2,i) ) + ( kappa*gradient(n2,i)*gradient(n2,i) ); // - (n2[i]/n[i])*interaction;
		pressure2[i] += correction;
		pressureNonIdeal2[i] = pressure2[i] - n2[i]*theta;

	}

	// Correction for the effective pressure that is exerted by including the gradient terms
	// This correction does not change the PGF; it only effects what is displayed in a variable separate from the actual pressure
	for (i = 0; i < XDIM; i++) {

		// PGF plus gravity term for each component
		F1[i] = -1.*gradient(pressureNonIdeal1,i) + n1[i]*g;
		// TODO: the corrected pressure has a bug in the boundary conditions
		correction = -( tau-(1./4.) )*F1[i]*F1[i]/n1[i] + (1./4.)*( laplace(pressure1,i)-theta*laplace(n1,i) );
		pressureCorrected1[i] = pressure1[i] + correction;	// used to display the effective pressure, not to calculate forces

		F2[i] = -1.*gradient(pressureNonIdeal2,i) + n2[i]*g;
		correction = -( tau-(1./4.) )*F2[i]*F2[i]/n2[i] + (1./4.)*( laplace(pressure2,i)-theta*laplace(n2,i) );
		pressureCorrected2[i] = pressure2[i] + correction;	// used to display the effective pressure, not to calculate forces

	}

	for (i = 0; i < XDIM; i++) {

		// Net momentum/velocity (mass flux) for this step
		//  - Equals zero if equal mass density moving in each direction
		u1g[i] = u1[i] + 0.5*F1[i]/n1[i];
		u2g[i] = u2[i] + 0.5*F2[i]/n2[i];

		// Friction forces on 1st component
		F1_0[i] = nReduced[i] * (u2g[i]-u1g[i]) * (u[i]+u1g[i]);
		F1_1[i] = (1./2.) * nReduced[i] * (u1g[i]-u2g[i]) * (u[i]+u1g[i]+1);
		F1_2[i] = (1./2.) * nReduced[i] * (u1g[i]-u2g[i]) * (u[i]+u1g[i]-1);
		friction1[i] = F1_0[i] + F1_1[i] + F1_2[i];

		// Friction forces on 2nd component
		F2_0[i] = nReduced[i] * (u1g[i]-u2g[i]) * (u[i]+u2g[i]);
		F2_1[i] = (1./2.) * nReduced[i] * (u2g[i]-u1g[i]) * (u[i]+u2g[i]+1);
		F2_2[i] = (1./2.) * nReduced[i] * (u2g[i]-u1g[i]) * (u[i]+u2g[i]-1);
		friction2[i] = F2_0[i] + F2_1[i] + F2_2[i];

		// Final forcing for each component including friction
		F1[i] += lambda * friction1[i];
		F2[i] -= lambda * friction2[i];

		// Correction to the equilibrium distribution that alters the actual PGF to pressure is constant in equilibirum
		psi = -oneOverTau * ( (tau-(1./4.))*F1[i]*F1[i]/n1[i] + (1./12.)*laplace(n1,i) );	// subtract psi, so minus sign relative to paper

		// Calculate particle densities at current lattice spot with forcing included
		f1_0[i] += oneOverTau * ( (n1[i] - n1[i]*theta - n1[i]*u1[i]*u1[i]) - f1_0[i] ) - ( 2.*F1[i]*u1[i] - psi );
		f1_1[i] += oneOverTau * ( (1./2.)*(n1[i]*u1[i]*u1[i]+n1[i]*u1[i]+n1[i]*theta)-f1_1[i]) - ( -F1[i]*u1[i] - (1./2.)*F1[i] + (1./2.)*psi );
		f1_2[i] += oneOverTau * ( (1./2.)*(n1[i]*u1[i]*u1[i]-n1[i]*u1[i]+n1[i]*theta)-f1_2[i]) - ( -F1[i]*u1[i] + (1./2.)*F1[i] + (1./2.)*psi );

		// Correction to the equilibrium distribution that alters the actual PGF to pressure is constant in equilibirum
		psi = -oneOverTau * ( (tau-(1./4.))*F2[i]*F2[i]/n2[i] + (1./12.)*laplace(n2,i) );	// subtract psi, so minus sign relative to paper

		f2_0[i] += oneOverTau * ( (n2[i] - n2[i]*theta - n2[i]*u2[i]*u2[i]) - f2_0[i] ) - ( 2.*F2[i]*u2[i] - psi );
		f2_1[i] += oneOverTau * ( (1./2.)*(n2[i]*u2[i]*u2[i] + n2[i]*u2[i] + n2[i]*theta) - f2_1[i] ) - ( -F2[i]*u2[i] - 1./2.*F2[i] + (1./2.)*psi );
		f2_2[i] += oneOverTau * ( (1./2.)*(n2[i]*u2[i]*u2[i] - n2[i]*u2[i] + n2[i]*theta) - f2_2[i] ) - ( -F2[i]*u2[i] + 1./2.*F2[i] + (1./2.)*psi );
	}

} // end function collision()


void collisionForcingNewChemicalPotentialGradient() {

	int i;
	double psi = 0;
	double tmpRho1 = 0;
	double tmpRho2 = 0;

	iterations++;

	// Sweep across the lattice to conserve mass and determine the pressures at each cell
	for (i = 0; i < XDIM; i++) {
		n1[i] = f1_0[i] + f1_1[i] + f1_2[i]; 				// 1st component mass density for this step
		tmpRho1 += n1[i];
		n2[i] = f2_0[i] + f2_1[i] + f2_2[i]; 				// 2st component mass density for this step
		tmpRho2 += n2[i];
		n[i] = n1[i] + n2[i];          						// conservation of particles
		nReduced[i] = n1[i]*n2[i] / n[i];

		u1[i] = (f1_1[i]-f1_2[i]) / n1[i];
		u2[i] = (f2_1[i]-f2_2[i]) / n2[i];
		u[i] = (n1[i]*u1[i] + n2[i]*u2[i]) / n[i];			// bulk average velocity
	}

	// Update the display of total densities to help confirm conservation
	rho1 = tmpRho1;
	rho2 = tmpRho2;
	rho = tmpRho1 + tmpRho2;
	//velocitySmoothing();

	calculatePressures();

	// These chemical potentials need density gradients, so calculate them separately
	for (i = 0; i < XDIM; i++) {
		mu1[i] = gammagamma * ( theta*log(n1[i]/(1.-(b1*n1[i]+b2*n2[i]))) + theta*b1*n1[i]/(1.-(b1*n1[i]+b2*n2[i])) + theta - 2.*a1*n1[i] - a12*n2[i] - laplace(n1,i) - laplace(n2,i) );
		mu2[i] = gammagamma * ( theta*log(n2[i]/(1.-(b1*n1[i]+b2*n2[i]))) + theta*b2*n2[i]/(1.-(b1*n1[i]+b2*n2[i])) + theta - 2.*a2*n2[i] - a12*n1[i] - laplace(n2,i) - laplace(n1,i) );

		muNonIdeal1[i] = mu1[i] - theta*log(n1[i]);
		muNonIdeal2[i] = mu2[i] - theta*log(n2[i]);
	}

	// Total pressure for the mu-based forcing... can no longer separate into component partial pressures
	for (i = 0; i < XDIM; i++) {
		pressure[i] = n[i]*theta + (b1*n1[i]*n1[i]+b2*n2[i]*n2[i])/(1.-(b1*n1[i]+b2*n2[i])) - a1*n1[i]*n1[i] - a2*n2[i]*n2[i] - a12*n1[i]*n2[i];	// base van der Waals gas pressure term

		// Gradient corrections applied in stages for readability
		pressure[i] += -kappa*( n1[i]*laplace(n1,i) + (1./2.)*gradient(n1,i)*gradient(n1,i) + n2[i]*laplace(n2,i) + (1./2.)*gradient(n2,i)*gradient(n2,i) ); // single component gradients
		pressure[i] += kappa*( gradient(n1,i)*gradient(n1,i) + gradient(n2,i)*gradient(n2,i) );
		pressure[i] += -kappa*( n1[i]*laplace(n2,i) + n2[i]*laplace(n1,i) + gradient(n1,i)*gradient(n2,i) ); // cross term gradient corrections
		pressure[i] += kappa*( 2.*gradient(n1,i)*gradient(n2,i) );
	}

	// Forcing derived from chemical potential gradients... a la Gibbs-Duhem (sum of both equals pressure gradient)
	for (i = 0; i < XDIM; i++) {
		F1[i] = -1.*n1[i]*gradient(muNonIdeal1,i) + n1[i]*g;
		F2[i] = -1.*n2[i]*gradient(muNonIdeal2,i) + n2[i]*g;
	}

	for (i = 0; i < XDIM; i++) {
		// calculatePressures();

		// Net momentum/velocity (mass flux) for this step
		//  - Equals zero if equal mass density moving in each direction
		u1g[i] = u1[i] + 0.5*F1[i]/n1[i];
		u2g[i] = u2[i] + 0.5*F2[i]/n2[i];

		// Friction forces on 1st component
		F1_0[i] = nReduced[i] * (u2g[i]-u1g[i]) * (u[i]+u1g[i]);
		F1_1[i] = (1./2.) * nReduced[i] * (u1g[i]-u2g[i]) * (u[i]+u1g[i]+1);
		F1_2[i] = (1./2.) * nReduced[i] * (u1g[i]-u2g[i]) * (u[i]+u1g[i]-1);
		friction1[i] = F1_0[i] + F1_1[i] + F1_2[i];

		// Friction forces on 2nd component
		F2_0[i] = nReduced[i] * (u1g[i]-u2g[i]) * (u[i]+u2g[i]);
		F2_1[i] = (1./2.) * nReduced[i] * (u2g[i]-u1g[i]) * (u[i]+u2g[i]+1);
		F2_2[i] = (1./2.) * nReduced[i] * (u2g[i]-u1g[i]) * (u[i]+u2g[i]-1);
		friction2[i] = F2_0[i] + F2_1[i] + F2_2[i];

		// Final forcing for each component including friction
		F1[i] += lambda * friction1[i];
		F2[i] -= lambda * friction2[i];

		// Calculate particle densities at current lattice spot with forcing included
		f1_0[i] += oneOverTau * ( (n1[i] - n1[i]*theta - n1[i]*u1[i]*u1[i]) - f1_0[i] ) - ( 2.*F1[i]*u1[i] );
		f1_1[i] += oneOverTau * ( (1./2.)*(n1[i]*u1[i]*u1[i]+n1[i]*u1[i]+n1[i]*theta)-f1_1[i]) - ( -F1[i]*u1[i] - (1./2.)*F1[i] );
		f1_2[i] += oneOverTau * ( (1./2.)*(n1[i]*u1[i]*u1[i]-n1[i]*u1[i]+n1[i]*theta)-f1_2[i]) - ( -F1[i]*u1[i] + (1./2.)*F1[i] );

		f2_0[i] += oneOverTau * ( (n2[i] - n2[i]*theta - n2[i]*u2[i]*u2[i]) - f2_0[i] ) - ( 2.*F2[i]*u2[i] );
		f2_1[i] += oneOverTau * ( (1./2.)*(n2[i]*u2[i]*u2[i] + n2[i]*u2[i] + n2[i]*theta) - f2_1[i] ) - ( -F2[i]*u2[i] - 1./2.*F2[i] );
		f2_2[i] += oneOverTau * ( (1./2.)*(n2[i]*u2[i]*u2[i] - n2[i]*u2[i] + n2[i]*theta) - f2_2[i] ) - ( -F2[i]*u2[i] + 1./2.*F2[i] );
	}

} // end function collision()


void streaming() {

	double tmp;

	/* Original wrap-around end points */

	tmp=f1_1[XDIM-1];                                   // save right end point
	memmove(&f1_1[1],&f1_1[0],(XDIM-1)*sizeof(double)); // shift all cells +1
	f1_1[0]=tmp;                                        // rotate former end to first lattice cell
	tmp=f1_2[0];                                        // save left end point
	memmove(&f1_2[0],&f1_2[1],(XDIM-1)*sizeof(double)); // shift all cells -1
	f1_2[XDIM-1]=tmp;                                   // rotate former first lattice cell to end

	tmp=f2_1[XDIM-1];                                   // save right end point
	memmove(&f2_1[1],&f2_1[0],(XDIM-1)*sizeof(double)); // shift all cells +1
	f2_1[0]=tmp;                                        // rotate former end to first lattice cell
	tmp=f2_2[0];                                        // save left end point
	memmove(&f2_2[0],&f2_2[1],(XDIM-1)*sizeof(double)); // shift all cells -1
	f2_2[XDIM-1]=tmp;                                   // rotate former first lattice cell to end

	/* Walls at the end points */
	// Bounce from lattice origin (0)
	tmp = f1_1[0];
	f1_1[0] = f1_2[XDIM-1];
	f1_2[XDIM-1]=tmp;

	tmp = f2_1[0];
	f2_1[0] = f2_2[XDIM-1];
	f2_2[XDIM-1]=tmp;

	/* Switching cells to simulate wall between lattice spots [wall-1]|[wall] */
	// TODO: this works for wall == 1 (correct) through wall == XDIM (bug)... should be restricted to wall == 1 through XDIM-1
	if (wall > 0) {
		// Wall for 1st component
		tmp = f1_1[wall];
		f1_1[wall] = f1_2[(wall-1+XDIM)%XDIM];
		f1_2[(wall-1+XDIM)%XDIM] = tmp;

		// Wall for 2nd component
		tmp = f2_1[wall];
		f2_1[wall] = f2_2[(wall-1+XDIM)%XDIM];
		f2_2[(wall-1+XDIM)%XDIM] = tmp;
	}

} // end function streaming()


void iteration(){

	collision();

	/*Evaporation part */
	//f0[epos]-=(dn-dn*T);
	//f1[epos]-=0.5*(dn*T);
	//f2[epos]-=0.5*(dn*T);

	streaming();

} // end function iteration()

